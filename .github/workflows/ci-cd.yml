name: EvoGenesis CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-asyncio pytest-cov flake8
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest
      run: |
        pytest --cov=evogenesis_core tests/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Build package
      run: |
        python -m build
        
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-without-markdown
        path: |
          dist
          !dist/**/*.md

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-without-markdown
        path: dist
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to container registry
      uses: docker/login-action@v2
      with:
        # Replace with your container registry credentials
        # This is a placeholder - use GitHub secrets in actual implementation
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: evogenesis:dev-latest,evogenesis:dev-${{ github.sha }}
        
    - name: Deploy to development environment
      run: |        # This script deploys the application to a Kubernetes development environment
        # Set up kubectl with service account credentials from secrets
        echo "${{ secrets.KUBE_CONFIG_DEV }}" > ./kubeconfig
        export KUBECONFIG=./kubeconfig
        
        # Update deployment
        echo "Deploying version ${{ github.sha }} to development environment"
        
        # Apply any database migrations first
        kubectl apply -f k8s/migrations/
        
        # Update the deployment with the new image tag
        kubectl set image deployment/evogenesis-api evogenesis-api=evogenesis:dev-${{ github.sha }} -n evogenesis-dev
        
        # Verify deployment update is rolled out properly
        kubectl rollout status deployment/evogenesis-api -n evogenesis-dev --timeout=300s
        
        # Update any configuration changes
        kubectl apply -f k8s/dev/configmaps.yaml -n evogenesis-dev
        
        # Clean up credentials
        rm ./kubeconfig
        
        echo "Deployment to development environment complete!"

  deploy-prod:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-without-markdown
        path: dist
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to container registry
      uses: docker/login-action@v2
      with:
        # Replace with your container registry credentials
        # This is a placeholder - use GitHub secrets in actual implementation
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: evogenesis:latest,evogenesis:${{ github.sha }}
        
    - name: Deploy to production environment
      run: |
        # This is a placeholder for your deployment script
        # In a real scenario, you might use kubectl, AWS CLI, Azure CLI, etc.
        echo "Deploying to production environment"
